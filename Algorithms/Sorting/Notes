                        ********** WHEN TO USE WHICH SORTING ALGORITHM *****************

Check out  https://www.toptal.com/developers/sorting-algorithms# for visualization of performance of each sorting algorithm on different data sets.

### INSERTION SORT : 
Insertion Sort is useful when the list is small or almost sorted.
It also has O(1) space complexity.

## BUBBLE AND SELECTION SORT :
Not really xD
Selection sort is worst tbh , it's complexity is O(n^2) even in best cases.
They also have O(1) space complexity.

## MERGE SORT :
Has a time complexity O(nlogn) in every case.(Thanks to Divide and Conquer)
Better than most algoirthms.

But it's expensive in space complexity as O(n) required.
Suitable for external sorting or no memory constraint.

## QUICK SORT :
Better than merge sort in terms of space complexity i.e O(log(n)).
And time complexity O(nlog(n)) , same as merge sort.
Based on Divide and Conquer, partitions.

But the problem comes in worst cases, if the pivot is not picked right, it gives O(n^2) complexity,
Thus reallly sllllooooowwww in worst cases.

## HEAP SORT :
Heapsort is a comparison-based sorting algorithm that uses a binary heap data structure.
Like mergesort, heapsort has a running time of O(n\log n),O(nlogn), and like insertion sort, heapsort sorts in-place, so no extra space is needed during the sort.

The most direct competitor of quicksort is heapsort. 

Heapsort is typically somewhat slower than quicksort, but the worst-case running time is always Î˜(nlogn). 
Quicksort is usually faster, though there remains the chance of worst case performance except in the introsort variant, which switches to heapsort when a bad case is detected.
If it is known in advance that heapsort is going to be necessary, using it directly will be faster than waiting for introsort to switch to it.


## INTRO SORT :
Introsort or introspective sort is a hybrid sorting algorithm that provides both fast average performance and (asymptotically) optimal worst-case performance.

It begins with quicksort, it switches to heapsort when the recursion depth exceeds a level based on (the logarithm of) the number of elements being sorted 
and it switches to insertion sort when the number of elements is below some threshold. 

This combines the good parts of the three algorithms, with practical performance comparable to quicksort on typical data sets and worst-case O(n log n) runtime due to the heap sort.
Since the three algorithms it uses are comparison sorts, it is also a comparison sort.

Introsort was invented by David Musser in Musser (1997), in which he also introduced introselect, a hybrid selection algorithm based on quickselect (a variant of quicksort), 
which falls back to median of medians and thus provides worst-case linear complexity, which is optimal.

Both algorithms were introduced with the purpose of providing generic algorithms for the C++ Standard Library which had both fast average performance and optimal worst-case performance, thus allowing the performance requirements to be tightened.
Introsort is in place and not stable.

### WHAT ABOUT SORTING ALOGRITHMS WITH Linear Time Complexity, like Count Sort ,Radix Sort :
These are not used generally cause :
a.They work on restricted range on numbers.
b.They work only on numbers, not other data types.
  Because of how numbers are stored in memory


### STABLE ALGORITHMS :
MERGE     SORT
INSERTION SORT
BUBBLE    SORT
COUNT     SORT
RADIX     SORT

### UNSTABLE ALGORITHMS :
QUICK SORT
INTRO SORT
HEAP  SORT
SELECTION SORT
SHELL SORT

