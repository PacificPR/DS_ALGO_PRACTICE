******** ios_base::sync_with_stdio(false);

This disables the synchronization between the C and C++ standard streams.
By default, all standard streams are synchronized, which in practice allows you to mix C- and C++-style I/O and get sensible and expected results.
If you disable the synchronization, then C++ streams are allowed to have their own independent buffers, which makes mixing C- and C++-style I/O an adventure.

Also keep in mind that synchronized C++ streams are thread-safe (output from different threads may interleave, but you get no data races).

 ******* cin.tie(NULL);
tie() is a method which simply guarantees the flushing of std::cout before std::cin accepts an input.
This is useful for interactive console programs which require the console to be updated constantly but also slows down the program for large I/O. The NULL part just returns a NULL pointer.

If cin and cout are tied, you can expect the output to be flushed (i.e., visible on the console) before the program prompts input from the user. If you untie the streams, the program might block waiting for the user to enter their name but the "Enter name" message is not yet visible (because cout is buffered by default, output is flushed/displayed on the console only on demand or when the buffer is full).

So if you untie cin from cout, you must make sure to flush cout manually every time you want to display something before expecting input on cin.

In conclusion, know what each of them does, understand the consequences, and then decide if you really want or need the possible side effect of speed improvement.


$$$$$$$$$$$ 
    Actually,cin and cout can be faster than scanf() and printf()            
    But it depends.If you are not using scanf() and printf() ,then at the start of main() use std::ios_base::sync_with_stdio(false);.
    This turns off the intermixing calls to scanf()/printf() with operations on cin/cout. Actually,by default cin/cout wastes time synchronizing with c libraryâ€™s stdio buffers.

