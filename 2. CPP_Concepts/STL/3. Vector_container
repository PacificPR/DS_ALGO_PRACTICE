                    ************************ VECTOR ******************************

Vectors are same as dynamic arrays with the ability to resize itself automatically when an element is inserted or deleted, with their storage being handled automatically by the container. 
Vector elements are placed in contiguous storage so that they can be accessed and traversed using iterators. 
In vectors, data is inserted at the end. Inserting at the end takes differential time, as sometimes there may be a need of extending the array. 
Removing the last element takes only constant time because no resizing happens. Inserting and erasing at the beginning or in the middle is linear in time.

************* VECTOR SIZE CHANGE :
When std::vector’s internal memory completely finishes then it increases the size of its memory. To do that it performs following steps,

1.) It will allocate a bigger chunk of memory on heap i.e. almost double the size of previously allocated.
2.) Then it copies all the elements from old memory location to new one. Yes it copies them, so in case our elements are user defined objects then their copy constructor will be called. Which makes this step quite heavy in terms of speed.
3.) Then after successful copying it deletes the old memory. 


*************** Iterators {Used to iterate over the vector, traversing , inside the loop}

    vector<int> v;

1.begin() – Returns an iterator pointing to the first element in the vector
 Example - >  for (auto i = v.begin(); i != v.end(); ++i) 
                 cout << *i << " "; 

2.end() – Returns an iterator pointing to the theoretical element that follows the last element in the vector

3.rbegin() – Returns a reverse iterator pointing to the last element in the vector (reverse beginning). It moves from last to first element
 Example - >  for (auto ir = g1.rbegin(); ir != g1.rend(); ++ir) 
                cout << *ir << " "; 

4.rend() – Returns a reverse iterator pointing to the theoretical element preceding the first element in the vector (considered as reverse end)

5.cbegin() – Returns a constant iterator pointing to the first element in the vector.
            //The cbegin,crbegin.. represents constant iterator, so we can't
            //change the values pointed by them
            for(it = v.cbegin();it != v.cend();it++)
            {
                *it = *it + 10;  // X WRONG X
            }
            THIS IS NOT ALLOWED
6.cend() – Returns a constant iterator pointing to the theoretical element that follows the last element in the vector.

7.crbegin() – Returns a constant reverse iterator pointing to the last element in the vector (reverse beginning). It moves from last to first element

8.crend() – Returns a constant reverse iterator pointing to the theoretical element preceding the first element in the vector (considered as reverse end)

*************** Capacity

    vector<int> v;

1.size() – Returns the number of elements in the vector.

2.max_size() – Returns the maximum number of elements that the vector can hold.

3.capacity() – Returns the size of the storage space currently allocated to the vector expressed as number of elements.
            
4.resize(n) – Resizes the container so that it contains ‘n’ elements.

5.empty() – Returns whether the container is empty.

**** 6.shrink_to_fit() – Reduces the capacity of the container to fit its size and destroys all elements beyond the capacity.
                    Deallocates the extra space left in capacity

****  7.reserve() – Requests that the vector capacity be at least enough to contain n elements.
              To avoid copying of nos from 1 to another memory allocation, everytime the size exceeds vector's capacity,reserve large memoryin the begining itself.

************* Element access:

1.reference operator [g] – Returns a reference to the element at position ‘g’ in the vector
2.at(g) – Returns a reference to the element at position ‘g’ in the vector
3.front() – Returns a reference to the first element in the vector
4.back() – Returns a reference to the last element in the vector
5.data() – Returns a direct pointer to the memory array used internally by the vector to store its owned elements.



**************** Modifiers: 
        
        vector<int> v;

1.assign() – It assigns new value to the vector elements by replacing old ones
            Example -> v.assign(5, 10); 
                       // fill the array with 10 five times 

2.push_back() – It push the elements into a vector from the back
	        Example -> v.push_back(15); 
                    // inserts 15 to the last position 

3.pop_back() – It is used to pop or remove elements from a vector from the back.
	        Example -> v.pop_back();
                    // removes last element 

4.insert() – It inserts new elements before the element at the specified position
	        Example -> v.insert(v.begin(), 5); 
                    // inserts 5 at the beginning 

5.erase() – It is used to remove elements from a container from the specified position or range.
	        Example -> v.erase(v.begin()); 
                    // removes the first element 

6.swap() – It is used to swap the contents of one vector with another vector of same type. Sizes may differ.


7.clear() – It is used to remove all the elements of the vector container


8.emplace() – It extends the container by inserting new element at position
	        Exmaple -> v.emplace(v.begin(), 5); 
                        // inserts at the beginning 

9.emplace_back() – It is used to insert a new element into the vector container, the new element is added to the end of the vector
// Inserts 20 at the end 
	v.emplace_back(20); 


